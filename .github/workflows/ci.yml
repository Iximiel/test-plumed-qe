name: CI

on:
  push:
  pull_request:

env:
# on CI, better dump stack trace in case there is an error
  PLUMED_STACK_TRACE: yes
# use two threads for openMP tests
  PLUMED_NUM_THREADS: 2
# these are used to build required packages
  CC: gcc
  CXX: g++

jobs:
  linux:
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: false
      matrix:
        variant:
        - -mpi-
        - -
        - -intel-
        buildType:
        - Release
    env:
      # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
      BUILD_TYPE: ${{ matrix.buildType }}
    steps:
    - uses: actions/checkout@v2
    - uses: actions/cache@v2
      id: ccache-restore
      with:
        path: ~/.ccache
        key: ccache-linux${{ matrix.variant }}hash-${{ github.sha }}
        restore-keys: |
          ccache-linux${{ matrix.variant }}hash-${{ github.sha }}
          ccache-linux${{ matrix.variant }}hash
    - name: Set paths
      run: |
        echo "$HOME/opt/bin" >> $GITHUB_PATH
        echo "CPATH=$HOME/opt/include:$CPATH" >> $GITHUB_ENV
        echo "INCLUDE=$HOME/opt/include:$INCLUDE" >> $GITHUB_ENV
        echo "LIBRARY_PATH=$HOME/opt/lib:$LIBRARY_PATH" >> $GITHUB_ENV
        echo "LD_LIBRARY_PATH=$HOME/opt/lib:$LD_LIBRARY_PATH" >> $GITHUB_ENV
    - name: Install generic packages
      run: |
        sudo apt-get update -qq
        sudo apt-get install -y libatlas-base-dev
        sudo apt-get install -y libfftw3-dev
        sudo apt-get install -y gsl-bin
        sudo apt-get install -y libgsl0-dev
        sudo apt-get install -y gfortran
        sudo apt-get install -y ccache
        sudo apt-get install -y cmake
      # install INTEL at last since it modifies CC and CXX
    - name: Install INTEL compiler
      if: contains( matrix.variant, '-intel-' )
      run: |
        wget https://apt.repos.intel.com/intel-gpg-keys/GPG-PUB-KEY-INTEL-SW-PRODUCTS-2023.PUB
        sudo apt-key add GPG-PUB-KEY-INTEL-SW-PRODUCTS-2023.PUB
        rm GPG-PUB-KEY-INTEL-SW-PRODUCTS-2023.PUB
        echo "deb https://apt.repos.intel.com/oneapi all main" | sudo tee /etc/apt/sources.list.d/oneAPI.list
        sudo apt-get update
        sudo apt-get install intel-oneapi-compiler-dpcpp-cpp-and-cpp-classic intel-oneapi-mkl intel-oneapi-mkl-devel intel-oneapi-compiler-fortran
        source /opt/intel/oneapi/setvars.sh
        printenv >> $GITHUB_ENV
        echo "CXX=icpc" >> $GITHUB_ENV
        echo "CC=icc" >> $GITHUB_ENV
        echo "FC=ifort" >> $GITHUB_ENV
    - name: Install MPI
      # install MPI at last since it modifies CC and CXX
      if: contains( matrix.variant, '-mpi-' )
      run: |
        sudo apt-get install -y libopenmpi-dev openmpi-bin
        echo "OMPI_MCA_btl_base_warn_component_unused=0" >> $GITHUB_ENV
        echo "OMPI_MCA_btl_base_verbose=0" >> $GITHUB_ENV
        echo "MPIEXEC=mpirun --oversubscribe" >> $GITHUB_ENV
    - name: Get PLUMED
      run: |
        git clone https://github.com/Iximiel/plumed2.git
        cd plumed2
        git checkout cmakePatcheswithmaster
        mkdir build
        
    - name: Configure CMake for Plumed
      working-directory: ${{github.workspace}}/plumed2/build
        # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
        # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
        #set up without warnings
      run: > 
        cmake -S ${{github.workspace}}/plumed2 -B .
        -DCXX_COMPILER_LAUNCHER=ccache 
        -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}
        -Doption_relaxed_dependencies=ON 
        -Denable_warnings_basic=OFF 
        -DCMAKE_INSTALL_PREFIX="$HOME/opt"

    - name: Build  and install Plumed2
      working-directory: ${{github.workspace}}/plumed2/build
      run: |
       ccache -s -M 100M
       cmake --build . --config ${{env.BUILD_TYPE}} --parallel 4
       cmake --install .
       echo "Plumed2_DIR=$HOME/opt/lib/cmake/Plumed2" >> $GITHUB_ENV
    - name: Build QE
      run: |
        git clone https://gitlab.com/QEF/q-e.git
        cd q-e
        git checkout qe-7.0
        plumed patch --engine qespresso-7.0 -p -f
        mkdir build
        cd build
        cmake ../ . -DCMAKE_INSTALL_PREFIX="$HOME/opt" -DFortran_COMPILER_LAUNCHER=ccache -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}
        cmake --build . --config ${{env.BUILD_TYPE}}  -j 4
        cmake --install .
        ccache -s -M 100M
    - name: storing the ccache
      id: ccache-store
      # this makes the cache to be updated also if compilation would file
      if: always() 
      uses: actions/cache/save@v3
      with:
          path: ~/.ccache
          key: ${{ steps.ccache-restore.outputs.cache-primary-key }}
    - name: Check files
      run: |
        prefix=$HOME/opt
        ls -ltr $prefix/bin
        ls -ltr $prefix/lib
        nm -C $prefix/bin/pw.x | grep plumed
        ldd $prefix/bin/pw.x
    - name: Run tests
      run: |
        ./run_tests.sh
        